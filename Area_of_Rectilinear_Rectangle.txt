#include <map>
#include <set>
#include <list>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <iomanip>
#include <algorithm>
#include <iostream>
#include <cmath>
#include <string>
#define pi (3.14159265359)
#define mod 1000000007
#define min1 INT_MIN
#define max1 INT_MAX
#define int long long int
using namespace std;
int powoftwonumber(int, int);
int sumofprimenumber(int);
int power(int, int);

int32_t main()
{
    int t;
    cin >> t;
    while (t--)
    {
       int a[2],b[2],c[2],d[2];
       cin>>a[0]>>a[1];
       cin>>b[0]>>b[1];
       cin>>c[0]>>c[1];
       cin>>d[0]>>d[1];
       int sum=0;
       int x,y;
       x=llabs(a[0]-b[0]);
       y=llabs(a[1]-b[1]);
       sum=sum+x*y;
       x=llabs(c[0]-d[0]);
       y=llabs(c[1]-d[1]);
       sum=sum+x*y;
       x=min(b[0],d[0])-max(a[0],c[0]);
       y=min(b[1],d[1])-max(a[1],c[1]);
       if(x<0||y<0)
       {
           cout<<sum<<"\n";
       }
       else
       {
           cout<<sum-x*y<<"\n";
       }
    }
    return 0;
}

int sumofprimenumber(int N)
{
    int i, Number, count, s = 0;
    for (Number = 2; Number <= N; Number++)
    {
        count = 0;
        for (i = 2; i <= sqrt(Number); i++)
        {
            if (Number % i == 0)
            {
                count++;
                break;
            }
        }
        if (count == 0)
        {
            s = s + Number;
        }
    }
    return s;
}

int powoftwonumber(int a, int b)
{
    int res = 1;
    while (b > 0)
    {
        if ((b & 1) != 0)
        {
            res = (res % mod * a % mod) % mod;
        }
        a = (a % mod * a % mod) % mod;
        b = b >> 1;
    }
    return res;
}

int power(int x, int y)
{
    int res = 1; // Initialize result
    x = x % mod; // Update x if it is more than or // equal to p
    if (x == 0)
        return 0; // In case x is divisible by p;
    while (y > 0)
    {
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % mod;
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % mod;
    }
    return res;
}
